1
00:00:00,472 --> 00:00:04,675
[GIT MERGE 2013]

2
00:00:04,675 --> 00:00:06,809
Bonjour, je m'appelle Roberto Tyley.

3
00:00:06,809 --> 00:00:08,813
Je travaille au Guardian au Royaume-Uni

4
00:00:08,813 --> 00:00:12,150
et j'ai codé un outil nommé le « BFG »

5
00:00:12,150 --> 00:00:16,005
pour faire comme git-filter-branch
en plus simple et plus rapide.

6
00:00:16,005 --> 00:00:20,561
En gros, il gère le problème
de tout ce qui pollue l'historique Git

7
00:00:20,561 --> 00:00:24,141
et dont on ne peut se débarrasser
par un simple rebase

8
00:00:24,141 --> 00:00:27,531
car ça traine un peu partout
dans le projet.

9
00:00:27,531 --> 00:00:31,106
Donc, c'est plus rapide et plus simple
que git-filter-branch

10
00:00:31,106 --> 00:00:32,870
pour éliminer les trucs indésirables,

11
00:00:32,870 --> 00:00:34,538
par exemple de gros fichiers

12
00:00:34,538 --> 00:00:37,647
qui rendent votre dépôt
vraiment gros à télécharger,

13
00:00:37,647 --> 00:00:39,218
ou des mots de passe.

14
00:00:39,218 --> 00:00:42,960
Peut-être voulez-vous publier votre dépôt
sur une plateforme publique externe

15
00:00:42,960 --> 00:00:45,151
sans laisser trainer
vos anciens mots de passe,

16
00:00:45,151 --> 00:00:47,195
même si, en principe,
vous les avez changés.

17
00:00:47,195 --> 00:00:50,288
Bon, on passe sur le VGA ?
Cool. À l'ancienne !

18
00:00:50,288 --> 00:00:52,309
C'est pour ça que je voudrais un ThinkPad,

19
00:00:52,309 --> 00:00:55,419
parce qu'ils sont encore équipés 
de connecteurs VGA, vous voyez !

20
00:00:55,419 --> 00:00:56,689
Alors, ça marche ?

21
00:01:00,598 --> 00:01:03,769
Qui a déjà vu la vidéo du BFG ?

22
00:01:03,769 --> 00:01:04,776
Personne ?

23
00:01:04,776 --> 00:01:07,289
Si, quelques personnes au fond.

24
00:01:07,289 --> 00:01:09,551
Comme tout le monde ne lève pas la main,

25
00:01:09,551 --> 00:01:12,317
je vais vous montrer la vidéo.

26
00:01:16,892 --> 00:01:18,885
Un des arguments essentiels,

27
00:01:18,885 --> 00:01:21,166
c'est que c'est plus rapide.

28
00:01:24,565 --> 00:01:27,765
Et, donc, pour le prouver,
(Rire)

29
00:01:27,765 --> 00:01:30,628
je l'ai installé sur un Raspberry Pi,

30
00:01:30,628 --> 00:01:34,299
qui est un ordinateur qui coûte 25 £,

31
00:01:34,299 --> 00:01:38,042
un ordinateur vraiment pas cher,
j'en ai amené un ici.

32
00:01:39,910 --> 00:01:43,968
Vous voyez ? La commande BFG
était largement plus simple.

33
00:01:43,968 --> 00:01:47,063
Et voici donc ce petit appareil à 700 MHz

34
00:01:47,063 --> 00:01:50,093
côte-à-côte avec un bon gros Mac
à quatre unités de calcul,

35
00:01:50,093 --> 00:01:52,431
qui, comme vous savez,
est un chouette ordinateur.

36
00:01:52,431 --> 00:01:54,181
Donc ils se lancent et, regardez,

37
00:01:54,181 --> 00:01:56,588
filter-branch prend la tête de la course,

38
00:01:56,588 --> 00:01:58,628
c'est assez bon.

39
00:01:58,628 --> 00:02:00,916
Le BFG, lui, se met en place,

40
00:02:00,916 --> 00:02:04,351
et on a là un petit écran qui montre
ce que mijote le Raspberry Pi.

41
00:02:04,356 --> 00:02:07,620
Ah, mais... Le BFG rattrape son retard

42
00:02:07,620 --> 00:02:09,464
malgré le Raspberry !

43
00:02:10,204 --> 00:02:12,257
Et, en accélérant,

44
00:02:12,257 --> 00:02:13,643
on peut constater, oh là là,

45
00:02:13,643 --> 00:02:15,614
Le BFG passe carrément en tête

46
00:02:15,614 --> 00:02:18,885
et il en est à 41 000 commits, et...

47
00:02:18,885 --> 00:02:22,463
(souffle bruyamment)
il met le reste à jour maintenant,

48
00:02:22,463 --> 00:02:24,353
c'est la partie la plus lente.

49
00:02:24,353 --> 00:02:28,018
Voilà, ça a pris 25 minutes,
sur ce matériel dérisoire...

50
00:02:28,018 --> 00:02:30,431
Et voici les résultats :

51
00:02:30,431 --> 00:02:32,955
Il a fallu 45 minutes au Mac.

52
00:02:32,955 --> 00:02:35,262
Ça a pris 25 minutes au BFG
sur son Raspberry Pi.

53
00:02:35,262 --> 00:02:37,084
Et si vous avez du matériel classique,

54
00:02:37,084 --> 00:02:37,943
sans doute pas ça,

55
00:02:37,943 --> 00:02:39,878
alors ça prendra environ une minute.

56
00:02:39,878 --> 00:02:42,138
Et, bon, si votre dépôt est gigantesque,

57
00:02:42,138 --> 00:02:44,185
ça peut vous prendre toute une nuit,

58
00:02:44,185 --> 00:02:45,950
surtout si c'est une tâche complexe.

59
00:02:45,950 --> 00:02:50,536
Je vais maintenant vous montrer
quelques trucs facilités par le BFG.

60
00:02:54,963 --> 00:02:56,974
Non, pas ça...

61
00:03:11,998 --> 00:03:16,474
Tant pis, bon... supprimer un fichier...

62
00:03:16,474 --> 00:03:20,082
voici comment faire avec le BFG
pour supprimer le bon fichier.

63
00:03:20,082 --> 00:03:22,628
Avec git-filter-branch,
c'est une commande basique.

64
00:03:22,628 --> 00:03:26,126
Je sais, avec toutes ses options,
c'est un outil puissant,

65
00:03:26,126 --> 00:03:31,544
mais quand la plupart des gens
veulent utiliser git-filter-branch,

66
00:03:31,544 --> 00:03:33,477
c'est pour nettoyer leur historique,

67
00:03:33,477 --> 00:03:35,393
et c'est alors sans doute plus simple.

68
00:03:35,393 --> 00:03:38,392
Ça ne fait que détruire
toutes les copies avec ce nom de fichier

69
00:03:38,392 --> 00:03:41,908
et on peut toujours utiliser aussi
des globs et regex, etc.

70
00:03:41,908 --> 00:03:46,017
Et si des fichiers volumineux
encombrent son dépôt,

71
00:03:46,017 --> 00:03:48,592
voici comment vous devez faire.

72
00:03:48,592 --> 00:03:51,956
Et git-filter-branch n'est peut-être pas
l'outil le plus approprié ici,

73
00:03:51,956 --> 00:03:55,341
je n'en suis pas sûr, mais je n'ai jamais
trouvé de solution plus courte

74
00:03:55,341 --> 00:03:58,470
que des scripts indigestes
bash, Python ou autre.

75
00:03:58,470 --> 00:04:02,934
Ensuite... si vous voulez supprimer
une floppée de mots de passe,

76
00:04:02,934 --> 00:04:06,248
mettez simplement ces mots de passe
dans votre fichier

77
00:04:06,248 --> 00:04:07,745
et faites-le écumer le dépôt.

78
00:04:07,745 --> 00:04:10,766
Ou vous pouvez utiliser un sed
dans git-filter-branch.

79
00:04:10,766 --> 00:04:12,479
Donc, c'est juste plus facile,

80
00:04:12,479 --> 00:04:15,808
avec quelques métacaractères
et substitutions éventuellement.

81
00:04:15,808 --> 00:04:21,099
Il vous traite en alcoolique repenti
et ne touchera pas votre dernier commit.

82
00:04:21,099 --> 00:04:24,055
D'accord ? C'est un principe
que vous êtes supposé connaître :

83
00:04:24,055 --> 00:04:28,263
nettoyez vous-même l'historique en cours,
votre commit en cours,

84
00:04:28,263 --> 00:04:31,131
et moi je nettoie votre historique,
tout ce qui a précédé.

85
00:04:31,131 --> 00:04:35,011
Et avec le BFG, si vous voulez détruire
des mots de passe, il répond :

86
00:04:35,011 --> 00:04:38,188
Attention, ils sont présents aussi
dans votre commit en cours,

87
00:04:38,188 --> 00:04:41,578
réglez ça maintenant peut-être,
car moi je n'y toucherai pas.

88
00:04:41,578 --> 00:04:44,714
Bref... vous êtes un alcoolique repenti,

89
00:04:44,714 --> 00:04:48,803
qui a fait des bêtises par le passé
mais maintenant, c'est fini.

90
00:04:49,385 --> 00:04:51,984
Oh, et ce truc est assez joli :

91
00:04:51,984 --> 00:04:55,450
vos messages de commit parfois
mentionnent d'autres commits

92
00:04:55,456 --> 00:04:59,025
et le BFG va alors réarranger
ces messages de commit.

93
00:04:59,025 --> 00:05:01,234
S'il reconnaît l'ID du commit,

94
00:05:01,234 --> 00:05:05,343
Le BFG va le signaler :
c'était ce commit auparavant !

95
00:05:05,343 --> 00:05:08,611
C'est, j'espère, une façon sympathique
de nettoyer votre historique.

96
00:05:08,611 --> 00:05:10,561
Nous l'avons souvent utilisé au Guardian.

97
00:05:10,561 --> 00:05:12,520
Ça a servi aux gouvernements britanniques

98
00:05:12,520 --> 00:05:15,370
sur certains de leurs dépôts
et en divers lieux.

99
00:05:15,370 --> 00:05:16,993
Bref, c'est assez fiable.

100
00:05:16,993 --> 00:05:19,161
C'est fait avec JGits,

101
00:05:19,161 --> 00:05:20,380
c'est écrit en Scala.

102
00:05:20,380 --> 00:05:23,613
Donc, pour vos propres scripts,
n'importe quel langage JVM fera l'affaire

103
00:05:23,613 --> 00:05:26,263
s'il y en a un que vous préférez.

104
00:05:26,263 --> 00:05:27,138
(Rires)

105
00:05:27,138 --> 00:05:28,857
Bon, c'est fini !

106
00:05:28,857 --> 00:05:30,258
Merci à vous !

107
00:05:30,258 --> 00:05:32,764
(Applaudissements)

108
00:05:32,764 --> 00:05:37,345
[GIT MERGE 2013]
